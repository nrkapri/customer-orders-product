/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nayank.order.api;

import com.nayank.order.model.Address;
import com.nayank.order.model.OrderItem;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-31T03:11:10.158+05:30")

@Api(value = "order", description = "the order API")
public interface OrderApi {

    @ApiOperation(value = "adds an order item", nickname = "addOrder", notes = "Adds an order to the system", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "order created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addOrder(@ApiParam(value = "Order to add"  )  @Valid @RequestBody OrderItem orderItem);


    @ApiOperation(value = "Deletes an order", nickname = "deleteOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@ApiParam(value = "Order id to delete",required=true) @PathVariable("orderId") UUID orderId);


    @ApiOperation(value = "Find order by Id", nickname = "getOrderById", notes = "Returns a single order", response = OrderItem.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OrderItem.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrderItem> getOrderById(@ApiParam(value = "ID of order to return",required=true) @PathVariable("orderId") UUID orderId);


    @ApiOperation(value = "searches order", nickname = "searchOrder", notes = "By passing in the appropriate options, you can search for available orders in the system ", response = OrderItem.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = OrderItem.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Input"),
        @ApiResponse(code = 404, message = "no order found") })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OrderItem>> searchOrder(@ApiParam(value = "pass an optional customerId for looking up the orders") @Valid @RequestParam(value = "customerId", required = false) String customerId,@ApiParam(value = "pass an optional productId for looking up the orders") @Valid @RequestParam(value = "productId", required = false) String productId,@Min(0)@ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Update an existing Order", nickname = "updateOrder", notes = "", response = OrderItem.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OrderItem.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "order not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/order",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<OrderItem> updateOrder(@ApiParam(value = "Order object that needs to be updated" ,required=true )  @Valid @RequestBody OrderItem body);


    @ApiOperation(value = "Updates order ShipAddress", nickname = "updateOrderShipAddress", notes = "", response = OrderItem.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OrderItem.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PATCH)
    ResponseEntity<OrderItem> updateOrderShipAddress(@ApiParam(value = "ID of order that needs to be updated",required=true) @PathVariable("orderId") UUID orderId,@ApiParam(value = "Updated Ship Address of the order"  )  @Valid @RequestBody Address name);

}
