/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nayank.product.api;

import com.nayank.product.model.ProductItem;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-31T02:55:51.296+05:30")

@Api(value = "product", description = "the product API")
public interface ProductApi {

    @ApiOperation(value = "adds an producte item", nickname = "addProduct", notes = "Adds an product to the system", response = Long.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "product created", response = Long.class),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Long> addProduct(@ApiParam(value = "Product item to add"  )  @Valid @RequestBody ProductItem productItem);


    @ApiOperation(value = "Deletes a product", nickname = "deleteProduct", notes = "", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Product not found") })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@ApiParam(value = "Product id to delete",required=true) @PathVariable("productId") UUID productId);


    @ApiOperation(value = "Find product by Id", nickname = "getProductById", notes = "Returns a single Product", response = ProductItem.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ProductItem.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "product not found") })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductItem> getProductById(@ApiParam(value = "ID of product to return",required=true) @PathVariable("productId") UUID productId);


    @ApiOperation(value = "search products", nickname = "searchProducts", notes = "By passing in the appropriate options, you can search for available products in the system ", response = ProductItem.class, responseContainer = "List", tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = ProductItem.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProductItem>> searchProducts(@ApiParam(value = "pass an optional search string for looking up products") @Valid @RequestParam(value = "produceName", required = false) String produceName,@Min(0)@ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Updates a product Manufacturer", nickname = "updateProductManufacturer", notes = "", response = ProductItem.class, tags={ "product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ProductItem.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Product not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PATCH)
    ResponseEntity<ProductItem> updateProductManufacturer(@ApiParam(value = "ID of product that needs to be updated",required=true) @PathVariable("productId") UUID productId,@ApiParam(value = "Updated Manufacturer of the product"  )  @Valid @RequestBody ProductItem name);

}
