/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nayank.customer.api;

import com.nayank.customer.model.Address;
import com.nayank.customer.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-31T02:55:30.163+05:30")

@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    @ApiOperation(value = "Add a new customer", nickname = "addCustomer", notes = "", response = Long.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "customer created", response = Long.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/customer",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Long> addCustomer(@ApiParam(value = "Customer object that needs to be added to the store" ,required=true )  @Valid @RequestBody Customer body);


    @ApiOperation(value = "Deletes a customer", nickname = "deleteCustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer not found") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomer(@ApiParam(value = "Customer id to delete",required=true) @PathVariable("customerId") Long customerId);


    @ApiOperation(value = "Finds Customer by status", nickname = "findCustomersByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Customer.class, responseContainer = "List", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/customer/findByStatus",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Customer>> findCustomersByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "active, suspended, cancelled") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find customer by ID", nickname = "getCustomerById", notes = "Returns a single Customer", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "customer not found") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomerById(@ApiParam(value = "ID of customer to return",required=true) @PathVariable("customerId") Long customerId);


    @ApiOperation(value = "Update an existing Customer", nickname = "updateCustomer", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/customer",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Customer> updateCustomer(@ApiParam(value = "Customer object that needs to be updated" ,required=true )  @Valid @RequestBody Customer body);


    @ApiOperation(value = "Updates a Customer with Input Name", nickname = "updateCustomerAddress", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PATCH)
    ResponseEntity<Customer> updateCustomerAddress(@ApiParam(value = "ID of customer that needs to be updated",required=true) @PathVariable("customerId") Long customerId,@ApiParam(value = "Updated customer Address"  )  @Valid @RequestBody Address customerAddress);

}
